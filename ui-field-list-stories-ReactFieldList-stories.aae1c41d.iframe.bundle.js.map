{"version":3,"file":"ui-field-list-stories-ReactFieldList-stories.aae1c41d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AA8BA","sources":["webpack://@wpmudev/sui-react/./packages/ui/field-list/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n// Do something with the \"id\" and \"cehcked\"\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {FieldList, FieldListItem} from \"../../src\";\nimport dedent from \"dedent\";\nexport const sampleCode = dedent`\n        <FieldList\n            label=\"The Filed List Title\"\n            helper=\"Help text goes here\"\n            onToggle={(id, checked) => {\n                // Do something with the \"id\" and \"cehcked\"\n                console.log(id, checked)\n            }}\n        >\n            <FieldListItem id=\"field-1\" isChecked={false}>\n                Field 1\n            </FieldListItem>\n\n           <FieldListItem id=\"field-2\">Field 2</FieldListItem>\n              <FieldListItem id=\"field-3\" isChecked={true}>\n                Field 3\n              </FieldListItem>\n           <FieldListItem id=\"field-4\">Field 4</FieldListItem>\n        </FieldList>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    style: {\n      paddingTop: 30\n    },\n    children: [_jsx(\"p\", {\n      children: _jsx(_components.p, {\n        children: \"This is a general example of the Field List which you can tweak to fit your\\nneeds\"\n      })\n    }), _jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(FieldList, {\n        label: \"The Filed List Title\",\n        helper: \"Help text goes here\",\n        onToggle: (id, checked) => {\n          // Do something with the \"id\" and \"cehcked\"\n          console.log(id, checked);\n        },\n        children: [_jsx(FieldListItem, {\n          id: \"field-1\",\n          isChecked: false,\n          children: _jsx(_components.p, {\n            children: \"Field 1\"\n          })\n        }), _jsx(FieldListItem, {\n          id: \"field-2\",\n          children: \"Field 2\"\n        }), _jsx(FieldListItem, {\n          id: \"field-3\",\n          isChecked: true,\n          children: _jsx(_components.p, {\n            children: \"Field 3\"\n          })\n        }), _jsx(FieldListItem, {\n          id: \"field-4\",\n          children: \"Field 4\"\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: sampleCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
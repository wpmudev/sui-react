{"version":3,"file":"ui-config-table-stories-config-table-stories.f87ca080.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA","sources":["webpack://wpmudev-sui/./packages/ui/config-table/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {ConfigTable} from \"../../src\";\nimport {configs} from \"../configs\";\nimport dedent from \"dedent\";\nexport const sampleCode = dedent`\nimport { ConfigTable } from \"@wpmudev/sui-config-table\"\n\nconst configs = [\n      {\n        id: 1,\n        name: \"Default config\",\n        description: \"Recommended performance config for every site.\",\n        config: {\n          configs: {\n            settings: {\n              advanced: {\n                query_string: false,\n                emoji: false,\n                cart_fragments: false,\n                lazy_load: {\n                  enabled: false,\n                  preload: false,\n                },\n              },\n              gravatar: {\n                enabled: true,\n              },\n              page_cache: {\n                enabled: true,\n                detection: \"auto\",\n                integrations: {\n                  varnish: false,\n                  opcache: false,\n                },\n                preload: false,\n              },\n              performance: [],\n              rss: {\n                enabled: true,\n                duration: 3600,\n              },\n              settings: {\n                accessible_colors: false,\n                remove_settings: false,\n                remove_data: false,\n                control: true,\n              },\n              uptime: {\n                enabled: false,\n              },\n            },\n          },\n          strings: {\n            advanced: [\n              \"Remove query strings from assets - Inactive Remove Emoji JS & CSS files - Inactive Disable WooCommerce cart fragments - Inactive Comments lazy loading - Inactive\",\n            ],\n            gravatar: [\"Gravatar cache - Active\"],\n            page_cache: [\n              \"Page cache - Active File change detection - Auto Purge Varnish cache - Inactive Purge OpCache - Inactive Cache preloading - Inactive\",\n            ],\n            rss: [\"RSS caching - Active\"],\n            settings: [\n              \"High contrast mode - Inactive Remove settings on uninstall - Inactive Remove data on uninstall - Inactive Cache control in admin bar - Active\",\n            ],\n            uptime: [\"Uptime - Inactive\"],\n          },\n        },\n        plugin: \"1081721\",\n      },\n    ]\n\n    export const Example() = {\n        return (\n          <ConfigTable\n            configs={configs}\n            onActionClick={(id, type) => console.log(id, type)}\n          />\n        )\n}`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    style: {\n      paddingTop: 30\n    },\n    children: [_jsx(\"p\", {\n      children: _jsx(_components.p, {\n        children: \"Below is a general example of the config table which you can tweak to fit\\nyour needs\"\n      })\n    }), _jsx(Preview, {\n      wrapper: true,\n      children: _jsx(\"div\", {\n        style: {\n          padding: 50\n        },\n        children: _jsx(ConfigTable, {\n          configs: configs,\n          onActionClick: (id, type) => console.log(id, type)\n        })\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: sampleCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
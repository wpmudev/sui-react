{"version":3,"file":"ui-grid-stories-Grid-stories.17535f11.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA","sources":["webpack://wpmudev-sui/./packages/ui/grid/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Row, Col} from \"../../src\";\nimport {Box, BoxGroup} from \"@wpmudev/sui-box\";\nimport dedent from \"dedent\";\nexport const sampleCode = dedent`\n    <Row align={ { md: \"inline\" } }>\n        <Col>\n            <Box>\n                <BoxGroup>\n                    <p>Column 1</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n        <Col>\n            <Box>\n                <BoxGroup>\n                    <p>Column 2</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n        <Col>\n            <Box>\n                <BoxGroup>\n                    <p>Column 3</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n    </Row>\n`;\nexport const diffrentSizeCode = dedent`\n    <Row align={ { md: \"inline\" } }>\n        <Col size=\"3\">\n            <Box>\n                <BoxGroup>\n                    <p>Column 1</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n        <Col size=\"5\">\n            <Box>\n                <BoxGroup>\n                    <p>Column 2</p>\n                </BoxGroup>\n             </Box>\n        </Col>\n        <Col size=\"4\">\n            <Box>\n                <BoxGroup>\n                    <p>Column 3</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n    </Row>\n`;\nexport const stackedCode = dedent`\n    <Row align={ { xl: \"stacked\" } }>\n        <Col>\n            <Box>\n                <BoxGroup>\n                    <p>Column 1</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n        <Col>\n            <Box>\n                <BoxGroup>\n                    <p>Column 2</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n        <Col>\n            <Box>\n                <BoxGroup>\n                    <p>Column 3</p>\n                </BoxGroup>\n            </Box>\n        </Col>\n    </Row>\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"A Basic Grid Example with 3 columns\"\n      }), _jsx(\"p\", {\n        children: \"In this example the columns gets stacked on medium sized screens and smaller \"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(Row, {\n          align: {\n            md: \"inline\"\n          },\n          children: [_jsx(Col, {\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 1\"\n                })\n              })\n            })\n          }), _jsx(Col, {\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 2\"\n                })\n              })\n            })\n          }), _jsx(Col, {\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 3\"\n                })\n              })\n            })\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Columns with diffrent sizes\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(Row, {\n          align: {\n            md: \"inline\"\n          },\n          children: [_jsx(Col, {\n            size: \"3\",\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 1\"\n                })\n              })\n            })\n          }), _jsx(Col, {\n            size: \"5\",\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 2\"\n                })\n              })\n            })\n          }), _jsx(Col, {\n            size: \"4\",\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 3\"\n                })\n              })\n            })\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: diffrentSizeCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Columns stacked in all screens\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(Row, {\n          align: {\n            xl: \"stacked\"\n          },\n          children: [_jsx(Col, {\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 1\"\n                })\n              })\n            })\n          }), _jsx(Col, {\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 2\"\n                })\n              })\n            })\n          }), _jsx(Col, {\n            children: _jsx(Box, {\n              children: _jsx(BoxGroup, {\n                children: _jsx(\"p\", {\n                  children: \"Column 3\"\n                })\n              })\n            })\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: stackedCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
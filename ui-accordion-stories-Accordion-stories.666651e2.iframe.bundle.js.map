{"version":3,"file":"ui-accordion-stories-Accordion-stories.666651e2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACCA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACqEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA","sources":["webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/states/Neutral.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/states/Informative.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/states/Success.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/states/Critical.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/states/Warning.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/item-variations/Disabled.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/item-variations/Description.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/item-variations/Icon.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/item-variations/Checkbox.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/Examples/item-variations/Footer.mdx","webpack://@wpmudev/sui-react/./packages/ui/accordion/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const NeutralCode = dedent`\n<Accordion state=\"neutral\">\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n       <p>\n        Hi, I am accordion content body. you can swap me with your local\n        component.\n       </p>\n    </AccordionItemBody>\n  </AccordionItem>\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n      <p>\n      Hi, I am accordion content body. you can swap me with your local\n      component.\n      </p>\n    </AccordionItemBody>\n  </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(Accordion, {\n        state: \"neutral\",\n        children: [_jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        }), _jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: NeutralCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const InformativeCode = dedent`\n<Accordion state=\"informative\">\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n       <p>\n        Hi, I am accordion content body. you can swap me with your local\n        component.\n       </p>\n    </AccordionItemBody>\n  </AccordionItem>\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n      <p>\n      Hi, I am accordion content body. you can swap me with your local\n      component.\n      </p>\n    </AccordionItemBody>\n  </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(Accordion, {\n        state: \"informative\",\n        children: [_jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        }), _jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: InformativeCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const SuccessCode = dedent`\n<Accordion state=\"success\">\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n       <p>\n        Hi, I am accordion content body. you can swap me with your local\n        component.\n       </p>\n    </AccordionItemBody>\n  </AccordionItem>\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n      <p>\n      Hi, I am accordion content body. you can swap me with your local\n      component.\n      </p>\n    </AccordionItemBody>\n  </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(Accordion, {\n        state: \"success\",\n        children: [_jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        }), _jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: SuccessCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const CriticalCode = dedent`\n<Accordion state=\"critical\">\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n       <p>\n        Hi, I am accordion content body. you can swap me with your local\n        component.\n       </p>\n    </AccordionItemBody>\n  </AccordionItem>\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n      <p>\n      Hi, I am accordion content body. you can swap me with your local\n      component.\n      </p>\n    </AccordionItemBody>\n  </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(Accordion, {\n        state: \"critical\",\n        children: [_jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        }), _jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: CriticalCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const WarningCode = dedent`\n<Accordion state=\"warning\">\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n       <p>\n        Hi, I am accordion content body. you can swap me with your local\n        component.\n       </p>\n    </AccordionItemBody>\n  </AccordionItem>\n  <AccordionItem title=\"Accordion title\">\n    <AccordionItemBody>\n      <p>\n      Hi, I am accordion content body. you can swap me with your local\n      component.\n      </p>\n    </AccordionItemBody>\n  </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(Accordion, {\n        state: \"warning\",\n        children: [_jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        }), _jsx(AccordionItem, {\n          title: \"Accordion title\",\n          children: _jsx(AccordionItemBody, {\n            children: _jsx(\"p\", {\n              children: _jsx(_components.p, {\n                children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n              })\n            })\n          })\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: WarningCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const DisabledCode = dedent`\n<Accordion>\n        <AccordionItem\n            isDisabled={true}\n            title=\"Accordion title\"\n        >\n            <AccordionItemBody>\n                <p>\n                Hi, I am accordion content body. you can swap me with your local\n                component.\n                </p>\n            </AccordionItemBody>\n        </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(Section, {\n    style: {\n      paddingTop: 0\n    },\n    children: _jsxs(Section, {\n      title: \"Disabled\",\n      style: {\n        paddingTop: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: _jsxs(_components.p, {\n          children: [\"When \", _jsx(Code, {\n            small: true,\n            children: \"isDisabled\"\n          }), \" prop is set to\", \" \", \"\\n\", _jsx(Code, {\n            small: true,\n            children: \"true\"\n          }), \" the \", _jsx(Code, {\n            small: true,\n            children: \"AccordionItem\"\n          }), \" \", \"\\nwill be disabled\"]\n        })\n      }), _jsx(Preview, {\n        children: _jsx(Accordion, {\n          children: _jsx(AccordionItem, {\n            isDisabled: true,\n            title: \"Disabled Accordion\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: DisabledCode\n      })]\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const DescriptionCode = dedent`\n<Accordion>\n    <AccordionItem\n      title=\"Accordion title\"\n      description=\"Accordion Item Description\"\n    >\n      <AccordionItemBody>\n        <p>\n          Hi, I am accordion content body. you can swap me with your local\n          component.\n        </p>\n      </AccordionItemBody>\n    </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(Section, {\n    style: {\n      paddingTop: 0\n    },\n    children: _jsxs(Section, {\n      title: \"Description\",\n      style: {\n        paddingTop: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: _jsxs(_components.p, {\n          children: [\"Use the \", _jsx(Code, {\n            small: true,\n            children: \"description\"\n          }), \" prop to add a description to\\nthe \", _jsx(Code, {\n            small: true,\n            children: \"AccordionItem\"\n          })]\n        })\n      }), _jsx(Preview, {\n        children: _jsx(Accordion, {\n          children: _jsx(AccordionItem, {\n            title: \"Accordion title\",\n            description: \"Accordion Item Description\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: DescriptionCode\n      })]\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport {InfoAlt} from \"@wpmudev/sui-icons\";\nimport dedent from \"dedent\";\nexport const IconCode = dedent`\n<Accordion>\n        <AccordionItem\n            icon={<InfoAlt />}\n            title=\"Accordion title\"\n        >\n            <AccordionItemBody>\n                <p>\n                Hi, I am accordion content body. you can swap me with your local\n                component.\n                </p>\n            </AccordionItemBody>\n        </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(Section, {\n    style: {\n      paddingTop: 0\n    },\n    children: _jsxs(Section, {\n      title: \"Icon\",\n      style: {\n        paddingTop: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: _jsxs(_components.p, {\n          children: [\"Use the \", _jsx(Code, {\n            small: true,\n            children: \"icon\"\n          }), \" prop to add an icon to the\", \" \", \"\\n\", _jsx(Code, {\n            small: true,\n            children: \"AccordionItem\"\n          })]\n        })\n      }), _jsx(Preview, {\n        children: _jsx(Accordion, {\n          children: _jsx(AccordionItem, {\n            icon: _jsx(InfoAlt, {}),\n            title: \"Accordion title\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: IconCode\n      })]\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const CheckboxCode = dedent`\n<Accordion>\n        <AccordionItem\n            hasCheckbox={true}\n            onCheck={(checked) => console.log(checked)}\n            title=\"Accordion title\"\n        >\n            <AccordionItemBody>\n                <p>\n                Hi, I am accordion content body. you can swap me with your local\n                component.\n                </p>\n            </AccordionItemBody>\n        </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(Section, {\n    style: {\n      paddingTop: 0\n    },\n    children: _jsxs(Section, {\n      title: \"Checkbox\",\n      style: {\n        paddingTop: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: _jsxs(_components.p, {\n          children: [\"When \", _jsx(Code, {\n            small: true,\n            children: \"checkbox\"\n          }), \" prop is set to\", \" \", \"\\n\", _jsx(Code, {\n            small: true,\n            children: \"true\"\n          }), \" the \", _jsx(Code, {\n            small: true,\n            children: \"AccordionItem\"\n          }), \" \", \"\\nwill have a checkbox\"]\n        })\n      }), _jsx(Preview, {\n        children: _jsx(Accordion, {\n          children: _jsx(AccordionItem, {\n            onCheck: checked => console.log(checked),\n            hasCheckbox: true,\n            title: \"Accordion title\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: CheckboxCode\n      })]\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Button} from \"@wpmudev/sui-button\";\nimport {Accordion, AccordionItem, AccordionItemBody, AccordionItemFooter} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const FooterCode = dedent`\n<Accordion>\n    <AccordionItem title=\"Accordion title\">\n       <AccordionItemBody>\n        <p>\n         Hi, I am accordion content body. you can swap me with your local\n         component.\n        </p>\n       </AccordionItemBody>\n       <AccordionItemFooter>\n         <Button color=\"black\" appearance=\"secondary\">\n           Secondary\n         </Button>\n         <Button color=\"blue\" appearance=\"primary\">\n          Primary\n         </Button>\n       </AccordionItemFooter>\n   </AccordionItem>\n</Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsx(Section, {\n    style: {\n      paddingTop: 0\n    },\n    children: _jsxs(Section, {\n      title: \"Sidebar\",\n      style: {\n        paddingTop: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: _jsxs(_components.p, {\n          children: [\"Use the \", _jsx(Code, {\n            small: true,\n            children: \"AccordionItemFooter\"\n          }), \" component to add a\\nfooter to the \", _jsx(Code, {\n            small: true,\n            children: \"AccordionItem\"\n          })]\n        })\n      }), _jsx(Preview, {\n        children: _jsx(Accordion, {\n          children: _jsxs(AccordionItem, {\n            title: \"Accordion title\",\n            children: [_jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            }), _jsxs(AccordionItemFooter, {\n              children: [_jsx(Button, {\n                color: \"black\",\n                appearance: \"secondary\",\n                children: _jsx(_components.p, {\n                  children: \"Secondary\"\n                })\n              }), _jsx(Button, {\n                color: \"blue\",\n                appearance: \"primary\",\n                children: _jsx(_components.p, {\n                  children: \"Primary\"\n                })\n              })]\n            })]\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: FooterCode\n      })]\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n/*Import Variations*/\n/*Import Variations*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {Accordion, AccordionItem, AccordionItemBody} from \"../../src\";\nimport dedent from \"dedent\";\nimport Neutral from \"./Examples/states/Neutral.mdx\";\nimport Informative from \"./Examples/states/Informative.mdx\";\nimport Success from \"./Examples/states/Success.mdx\";\nimport Critical from \"./Examples/states/Critical.mdx\";\nimport Warning from \"./Examples/states/Warning.mdx\";\nimport Disabled from \"./Examples/item-variations/Disabled.mdx\";\nimport Description from \"./Examples/item-variations/Description.mdx\";\nimport Icon from \"./Examples/item-variations/Icon.mdx\";\nimport Checkbox from \"./Examples/item-variations/Checkbox.mdx\";\nimport Sidebar from \"./Examples/item-variations/Footer.mdx\";\nexport const sampleCode = dedent`\n     <Accordion>\n      <AccordionItem title=\"Accordion title\">\n        <AccordionItemBody>\n          <p>\n            Hi, I am accordion content body. you can swap me with your local component.\n          </p>\n        </AccordionItemBody>\n        </AccordionItem>\n        <AccordionItem\n          title=\"Accordion title\"\n        >\n          <AccordionItemBody>\n            <p>\n              Hi, I am accordion content body. you can swap me with your local component.\n            </p>\n          </AccordionItemBody>\n        </AccordionItem>\n      <AccordionItem\n          title=\"Accordion title\"\n        >\n          <AccordionItemBody>\n            <p>\n              Hi, I am accordion content body. you can swap me with your local component.\n            </p>\n          </AccordionItemBody>\n        </AccordionItem>\n    </Accordion>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [\"\\n\", \"\\n\", \"\\n\", \"\\n\", \"\\n\", _jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"Basic Accordion Example\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(Accordion, {\n          children: [_jsx(AccordionItem, {\n            title: \"Accordion title\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          }), _jsx(AccordionItem, {\n            title: \"Accordion title\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          }), _jsx(AccordionItem, {\n            title: \"Accordion title\",\n            children: _jsx(AccordionItemBody, {\n              children: _jsx(\"p\", {\n                children: _jsx(_components.p, {\n                  children: \"Hi, I am accordion content body. you can swap me with your local\\ncomponent.\"\n                })\n              })\n            })\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"State\",\n      style: {\n        paddingTop: 0\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"You can change the symentic type of the accordion by changing the\", \" \", \"\\n\", _jsx(Code, {\n          small: true,\n          children: \"state\"\n        }), \" prop\"]\n      }), _jsxs(Switcher, {\n        children: [_jsx(\"div\", {\n          label: \"neutral\",\n          value: \"neutral\",\n          children: _jsx(Neutral, {})\n        }), _jsx(\"div\", {\n          label: \"informative\",\n          value: \"informative\",\n          children: _jsx(Informative, {})\n        }), _jsx(\"div\", {\n          label: \"success\",\n          value: \"success\",\n          children: _jsx(Success, {})\n        }), _jsx(\"div\", {\n          label: \"warning\",\n          value: \"warning\",\n          children: _jsx(Warning, {})\n        }), _jsx(\"div\", {\n          label: \"critical\",\n          value: \"critical\",\n          children: _jsx(Critical, {})\n        })]\n      })]\n    }), \"\\n\", _jsx(Disabled, {}), \"\\n\", _jsx(Description, {}), \"\\n\", _jsx(Icon, {}), \"\\n\", _jsx(Checkbox, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
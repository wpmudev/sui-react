{"version":3,"file":"ui-checkbox-stories-ReactCheckbox-stories.1c1b2958.iframe.bundle.js","mappings":";;AAYA;;AAGA;;AAGA;;AAGA","sources":["webpack://@wpmudev/sui-react/./packages/ui/checkbox/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {BasicCheckbox} from \"./Examples/BasicCheckbox\";\nimport dedent from \"dedent\";\nexport const sampleCode = dedent`\n    <Checkbox label=\"Checkbox label\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nexport const disabledCode = dedent`\n    <Checkbox isDisabled={true} label=\"Disabled Checkbox\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nexport const smallCode = dedent`\n    <Checkbox isSmall={true} label=\"Small Checkbox\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nexport const indeterminateCode = dedent`\n    <Checkbox isIndeterminate={true} label=\"Indeterminate Checkbox\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"A basic Checkbox example used for most cases:\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          label: \"Checkbox label\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Disabled\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(\"p\", {\n        children: [\" To disable the checkbox use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isDisabled={true} \"\n        }), \" \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isDisabled: true,\n          label: \"Disabled Checkbox\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: disabledCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Small\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(\"p\", {\n        children: [\" To make the checkbox look smaller use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isSmall={true} \"\n        }), \" \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isSmall: true,\n          label: \"Small Checkbox\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: smallCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Indeterminate\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \" This is mainly used when the checkbox state depends on other checkboxes states where only some of them are checked. \"\n      }), _jsxs(\"p\", {\n        children: [\" Use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isIndeterminate={true} \"\n        }), \" to mark the checkbox as indeterminate \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isIndeterminate: true,\n          label: \"Indeterminate Checkbox\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: indeterminateCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
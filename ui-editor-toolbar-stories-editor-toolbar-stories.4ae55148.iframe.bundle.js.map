{"version":3,"file":"ui-editor-toolbar-stories-editor-toolbar-stories.4ae55148.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;AAGA;;AAGA","sources":["webpack://@wpmudev/sui-react/./packages/ui/editor-toolbar/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {EditorToolbar} from \"../../src\";\nimport {Button} from \"@wpmudev/sui-button\";\nimport {SegmentedControl, SegmentedControlButton} from \"@wpmudev/sui-segmented-control\";\nimport dedent from \"dedent\";\nexport const generalCode = dedent`\nimport { EditorToolbar } from \"@wpmudev/sui-editor-toolbar\"\nimport { Button } from \"@wpmudev/sui-button\"\nimport {\n\tSegmentedControl,\n\tSegmentedControlButton,\n} from \"@wpmudev/sui-segmented-control\"\n\n    const actions = (settingBtn) => {\n      return [\n         <Button\n           key={0}\n           appearance=\"tertiary\"\n           icon=\"Save\"\n           color=\"black\"\n           isSmall={true}\n           isResponsive={true}\n         >\n           Save Draft\n         </Button>,\n         <Button\n           key={1}\n           appearance=\"secondary\"\n           icon=\"Show\"\n           color=\"black\"\n           isSmall={true}\n           isFullWidth={true}\n           isResponsive={true}\n         >\n           Preview\n         </Button>,\n    \t     <Button\n            key={2}\n            appearance=\"primary\"\n            icon=\"Globe\"\n            color=\"blue\"\n            isSmall={true}\n            isFullWidth={true}\n         >\n            Publish\n         </Button>,\n          settingBtn,\n        ]\n    }\n\n    export const Example = () => {\n      return (\n        <EditorToolbar title=\"Toolbar Title\" actions={actions}>\n          <SegmentedControl name=\"type\">\n            <SegmentedControlButton\n               icon=\"Desktop\"\n               isResponsive={true}\n               value=\"visual\"\n             >\n                Visual\n             </SegmentedControlButton>\n            <SegmentedControlButton icon=\"Desktop\" isResponsive={true} value=\"code\">\n                Code\n            </SegmentedControlButton>\n          </SegmentedControl>\n        </EditorToolbar>\n      )\n    }\n\n`;\nexport const centeredContentCode = dedent`\n<EditorToolbar alignCenter={true} title=\"Toolbar Title\" actions={actions}/>\n`;\nexport const disallowBackCode = dedent`\n<EditorToolbar allowBack={false} title=\"Toolbar Title\" actions={actions}/>\n`;\nexport const actions = settingBtn => {\n  return [_jsx(Button, {\n    appearance: \"tertiary\",\n    icon: \"Save\",\n    color: \"black\",\n    isSmall: true,\n    isResponsive: true,\n    children: \"Save Draft\"\n  }, 0), _jsx(Button, {\n    appearance: \"secondary\",\n    icon: \"Show\",\n    color: \"black\",\n    isSmall: true,\n    isFullWidth: true,\n    isResponsive: true,\n    children: \"Preview\"\n  }, 1), _jsx(Button, {\n    appearance: \"primary\",\n    icon: \"Globe\",\n    color: \"blue\",\n    isSmall: true,\n    isFullWidth: true,\n    children: \"Publish\"\n  }, 2), settingBtn];\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: false,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"Below is a general example of the Editor Toolbar\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(EditorToolbar, {\n          title: \"Toolbar Title\",\n          actions: actions,\n          children: _jsxs(SegmentedControl, {\n            name: \"type\",\n            children: [_jsx(SegmentedControlButton, {\n              icon: \"Desktop\",\n              isResponsive: true,\n              value: \"visual\",\n              children: _jsx(_components.p, {\n                children: \"Visual\"\n              })\n            }), _jsx(SegmentedControlButton, {\n              icon: \"Desktop\",\n              isResponsive: true,\n              value: \"code\",\n              children: _jsx(_components.p, {\n                children: \"Code\"\n              })\n            })]\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: generalCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Centered Content\",\n      contained: false,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"Use the prop \", _jsx(Code, {\n          small: true,\n          children: \"alignCenter={true}\"\n        }), \" to center the content\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(EditorToolbar, {\n          alignCenter: true,\n          title: \"Toolbar Title\",\n          actions: actions,\n          children: _jsxs(SegmentedControl, {\n            name: \"type\",\n            children: [_jsx(SegmentedControlButton, {\n              icon: \"Desktop\",\n              isResponsive: true,\n              value: \"visual\",\n              children: _jsx(_components.p, {\n                children: \"Visual\"\n              })\n            }), _jsx(SegmentedControlButton, {\n              icon: \"Desktop\",\n              isResponsive: true,\n              value: \"code\",\n              children: _jsx(_components.p, {\n                children: \"Code\"\n              })\n            })]\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: centeredContentCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Centered Content\",\n      contained: false,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"Use the prop \", _jsx(Code, {\n          small: true,\n          children: \"allowBack={false}\"\n        }), \" to remove the back button\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(EditorToolbar, {\n          allowBack: false,\n          title: \"Toolbar Title\",\n          actions: actions,\n          children: _jsxs(SegmentedControl, {\n            name: \"type\",\n            children: [_jsx(SegmentedControlButton, {\n              icon: \"Desktop\",\n              isResponsive: true,\n              value: \"visual\",\n              children: _jsx(_components.p, {\n                children: \"Visual\"\n              })\n            }), _jsx(SegmentedControlButton, {\n              icon: \"Desktop\",\n              isResponsive: true,\n              value: \"code\",\n              children: _jsx(_components.p, {\n                children: \"Code\"\n              })\n            })]\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: disallowBackCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
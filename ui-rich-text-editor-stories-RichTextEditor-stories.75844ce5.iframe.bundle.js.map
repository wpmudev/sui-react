{"version":3,"file":"ui-rich-text-editor-stories-RichTextEditor-stories.75844ce5.iframe.bundle.js","mappings":";;;;;;AAeA;;ACFA;;;;;;AAOA","sources":["webpack://wpmudev-sui/./packages/ui/rich-text-editor/stories/tabs/TabCode.mdx","webpack://wpmudev-sui/./packages/ui/rich-text-editor/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Code, Snippet, PackageInstallGuide, PropSection, CommonPropsNotice} from \"@wpmudev/sui-docs\";\nimport dedent from \"dedent\";\nexport const tinyMceCode = dedent`\nadd_action('admin_enqueue_scripts', 'sui_load_mce_editor_scripts');\n    \n    function sui_load_mce_editor_scripts() {\n        wp_enqueue_editor()\n    }\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsx(PackageInstallGuide, {\n      packageName: \"@wpmudev/sui-rich-text-editor\"\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Props\",\n      border: true,\n      children: [_jsx(\"p\", {\n        children: \"The RichText Editor has one prop:\"\n      }), _jsx(PropSection, {\n        title: \"defaultValue\",\n        type: \"boolean\",\n        children: _jsx(\"p\", {\n          children: \"The default content set in the editor\"\n        })\n      }), _jsx(PropSection, {\n        title: \"isDisabled\",\n        type: \"boolean\",\n        defaultValue: \"false\",\n        children: _jsxs(\"p\", {\n          children: [\"When set to \", _jsx(Code, {\n            isSmall: true,\n            children: \"true\"\n          }), \" the editor will be disabled\"]\n        })\n      }), _jsx(PropSection, {\n        title: \"textareaId\",\n        type: \"string\",\n        children: _jsx(\"p\", {\n          children: \"The id of the textarea\"\n        })\n      }), _jsx(PropSection, {\n        title: \"className\",\n        type: \"string\",\n        children: _jsx(\"p\", {\n          children: \"Custom css className(s)\"\n        })\n      }), _jsx(PropSection, {\n        title: \"actions\",\n        type: \"React Node\",\n        children: _jsx(\"p\", {\n          children: \"Rich text editor also has extra button that can be used for additional control.\"\n        })\n      }), _jsx(PropSection, {\n        title: \"tinyMCEOptions\",\n        type: \"object\",\n        children: _jsxs(\"p\", {\n          children: [\"TinyMCE configurations, see here: \", _jsx(\"a\", {\n            href: \"https://www.tiny.cloud/docs-3x/reference/Configuration3x/\",\n            target: \"_blank\",\n            children: \"https://www.tiny.cloud/docs-3x/reference/Configuration3x/\"\n          })]\n        })\n      }), _jsx(PropSection, {\n        title: \"onChange\",\n        type: \"function\",\n        children: _jsx(\"p\", {\n          children: \"Catch textarea content\"\n        })\n      })]\n    }), \"\\n\", _jsx(CommonPropsNotice, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport dedent from \"dedent\";\nimport {RichTextEditor} from \"../RichTextEditor.stories\";\nimport {Button} from \"@wpmudev/sui-button\";\nexport const sampleCode = dedent`\n<RichTextEditor />\n`;\nexport const actionButtonCode = dedent`\n    <RichTextEditor\n        actions={\n            <Button type=\"secondary\" icon=\"Add\" colorScheme=\"black\">Add Field</Button>\n        }\n    />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 0\n      },\n      children: [_jsx(\"p\", {\n        children: \"The RichText Editor has one variation which is the following\"\n      }), _jsx(Preview, {\n        contained: true,\n        wrapper: true,\n        children: _jsx(RichTextEditor, {})\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"With an Action Button\",\n      contained: true,\n      style: {\n        paddingTop: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"You can optionally add custom action button(s) using the \", _jsx(Code, {\n          isSmall: true,\n          children: \"actions\"\n        }), \" prop\"]\n      }), _jsx(Preview, {\n        contained: true,\n        wrapper: true,\n        children: _jsx(RichTextEditor, {\n          actions: _jsx(Button, {\n            type: \"secondary\",\n            icon: \"Add\",\n            colorScheme: \"black\",\n            children: \"Add Field\"\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: actionButtonCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"ui-notification-stories-Notification-stories.a14a95f2.iframe.bundle.js","mappings":";;;;;;;AAiBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;ACwCA;;;;;;;AAQA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA","sources":["webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/Examples/variation/Info.mdx","webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/Examples/variation/Success.mdx","webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/Examples/variation/Warning.mdx","webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/Examples/variation/Error.mdx","webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/Examples/size/Sm.mdx","webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/Examples/size/Lg.mdx","webpack://@wpmudev/sui-react/./packages/ui/notification/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Notification} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const InfoCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      variation=\"info\"\n   />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsx(Notification, {\n        variation: \"info\",\n        title: \"Notification Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: InfoCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Notification} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const SuccessCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      variation=\"success\"\n   />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsx(Notification, {\n        variation: \"success\",\n        title: \"Notification Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: SuccessCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Notification} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const WarningCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      variation=\"warning\"\n   />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsx(Notification, {\n        variation: \"warning\",\n        title: \"Notification Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: WarningCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Notification} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const ErrorCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      variation=\"error\"\n   />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsx(Notification, {\n        variation: \"error\",\n        title: \"Notification Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: ErrorCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Notification} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const SmCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      size=\"sm\"\n   />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsx(Notification, {\n        size: \"sm\",\n        title: \"Notification Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: SmCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {Notification} from \"../../../../src\";\nimport dedent from \"dedent\";\nexport const LgCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      size=\"lg\"\n   />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(Section, {\n    contained: true,\n    border: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(Preview, {\n      wrapper: true,\n      children: _jsx(Notification, {\n        size: \"lg\",\n        title: \"Notification Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: LgCode\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Switcher, Code} from \"@wpmudev/sui-docs\";\nimport {Notification, NotificationRenderer} from \"../../src\";\nimport {Button} from \"@wpmudev/sui-button\";\nimport {useNotifications} from \"../../src/use-notification\";\nimport dedent from \"dedent\";\nimport Info from \"./Examples/variation/Info.mdx\";\nimport Success from \"./Examples/variation/Success.mdx\";\nimport Warning from \"./Examples/variation/Warning.mdx\";\nimport Error from \"./Examples/variation/Error.mdx\";\nimport Sm from \"./Examples/size/Sm.mdx\";\nimport Lg from \"./Examples/size/Lg.mdx\";\nexport const ToastButton = () => {\n  const notification = useNotifications();\n  return _jsx(Button, {\n    appearance: \"secondary\",\n    color: \"blue\",\n    isSmall: true,\n    onClick: () => {\n      notification.push({\n        title: \"Toast Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\"\n      });\n    },\n    children: \"Show Notification\"\n  });\n};\nexport const TimeOutToastButton = () => {\n  const notification = useNotifications();\n  return _jsx(Button, {\n    appearance: \"secondary\",\n    color: \"blue\",\n    isSmall: true,\n    onClick: () => {\n      notification.push({\n        title: \"Toast Title\",\n        message: \"This is notification message.\",\n        icon: \"CheckAlt\",\n        timeout: 1000\n      });\n    },\n    children: \"Show Notification\"\n  });\n};\nexport const sampleCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n   />\n`;\nexport const DismissCode = dedent`\n     <Notification\n      title=\"Notification Title\"\n      message=\"This is notification message.\"\n      icon=\"CheckAlt\"\n      isDismissible={true}\n   />\n`;\nexport const ActionCode = dedent`\n        <Notification\n            title=\"Notification Title\"\n            message=\"This is notification message.\"\n            icon=\"CheckAlt\"\n            action={\n                  <Button\n                    className=\"csb-banner__cta\"\n                    appearance=\"secondary\"\n                    color=\"blue\"\n                    isSmall={true}\n                >\n                   Action\n                </Button>\n            }\n        />\n`;\nexport const ToastCode = dedent`\n    const ToastExample = () => {\n    const notification = useNotifications()\n    return (\n        <>\n        <NotificationRenderer />\n        <Button\n            appearance=\"secondary\"\n            color=\"blue\"\n            isSmall={true}\n            onClick={() => {\n                notification.push({\n                    title: \"Notification Title\",\n                    message: \"This is notification message.\",\n                    icon: \"CheckAlt\",\n                })\n            }}\n        >\n            Show Notification\n        </Button>\n        </>\n    )\n}\n`;\nexport const TimeOutToastCode = dedent`\n    const ToastExample = () => {\n    const notification = useNotifications()\n    return (\n        <>\n        <NotificationRenderer />\n        <Button\n            appearance=\"secondary\"\n            color=\"blue\"\n            isSmall={true}\n            onClick={() => {\n                notification.push({\n                    title: \"Notification Title\",\n                    message: \"This is notification message.\",\n                    icon: \"CheckAlt\",\n                    timeout: 1000\n                })\n            }}\n        >\n            Show Notification\n        </Button>\n        </>\n    )\n}\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"Basic Notification Example \"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(Notification, {\n          title: \"Notification Title\",\n          message: \"This is notification message.\",\n          icon: \"CheckAlt\"\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Variation\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"You can change the type of the notification by changing the\", \" \", \"\\n\", _jsx(Code, {\n          small: true,\n          children: \"variation\"\n        }), \" prop\"]\n      }), _jsxs(Switcher, {\n        children: [_jsx(\"div\", {\n          label: \"info\",\n          value: \"info\",\n          children: _jsx(Info, {})\n        }), _jsx(\"div\", {\n          label: \"success\",\n          value: \"success\",\n          children: _jsx(Success, {})\n        }), _jsx(\"div\", {\n          label: \"warning\",\n          value: \"warning\",\n          children: _jsx(Warning, {})\n        }), _jsx(\"div\", {\n          label: \"error\",\n          value: \"error\",\n          children: _jsx(Error, {})\n        })]\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Size\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"You can change the size of the notification by changing the\", \" \", \"\\n\", _jsx(Code, {\n          small: true,\n          children: \"size\"\n        }), \" prop\"]\n      }), _jsxs(Switcher, {\n        children: [_jsx(\"div\", {\n          label: \"sm\",\n          value: \"sm\",\n          children: _jsx(Sm, {})\n        }), _jsx(\"div\", {\n          label: \"lg\",\n          value: \"lg\",\n          children: _jsx(Lg, {})\n        })]\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Dismissible\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"Set \", _jsx(Code, {\n          small: true,\n          children: \"isDismissible\"\n        }), \" prop to\", \" \", \"\\n\", _jsx(Code, {\n          small: true,\n          children: \"true\"\n        }), \" if you want to add a dismissing button\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(Notification, {\n          title: \"Notification Title\",\n          message: \"This is notification message.\",\n          icon: \"CheckAlt\",\n          isDismissible: true\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: DismissCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Action\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"Use the \", _jsx(Code, {\n          small: true,\n          children: \"action\"\n        }), \" prop to add a custom action button to\\nthe notification\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(Notification, {\n          title: \"Notification Title\",\n          message: \"This is notification message.\",\n          icon: \"CheckAlt\",\n          action: _jsx(Button, {\n            className: \"csb-banner__cta\",\n            appearance: \"secondary\",\n            color: \"blue\",\n            isSmall: true,\n            children: \"Action\"\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: ActionCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Toasts\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"Utilize \", _jsx(Code, {\n          small: true,\n          children: \"useNotifications\"\n        }), \" hook and\\n\", _jsx(Code, {\n          small: true,\n          children: `<NotificationRenderer />`\n        }), \" component if you want to\\nadd and remove notifications dynamically\"]\n      }), _jsx(\"div\", {\n        className: \"sui-wrap sui-theme--light\",\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: _jsxs(\"div\", {\n          className: \"sui-layout sui-layout--horizontal sui-layout--vertical\",\n          children: [_jsx(NotificationRenderer, {}), _jsx(ToastButton, {})]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: ToastCode\n      }), _jsx(Section, {\n        title: {\n          content: \"timeout\",\n          small: false\n        },\n        style: {\n          paddingTop: 0,\n          paddingLeft: 20,\n          paddingRight: 0,\n          paddingBottom: 0\n        },\n        children: _jsxs(\"p\", {\n          children: [\" By default, the toast is dismissed after \", _jsx(Code, {\n            small: true,\n            children: \"5000ms\"\n          }), \", you can customize that by using \", _jsx(Code, {\n            small: true,\n            children: \" timeout\"\n          }), \" prop, in the following example the notice is dismissed after \", _jsx(Code, {\n            small: true,\n            children: \"1000ms\"\n          }), \".\"]\n        })\n      }), _jsx(\"div\", {\n        className: \"sui-wrap sui-theme--light\",\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: _jsxs(\"div\", {\n          className: \"sui-layout sui-layout--horizontal sui-layout--vertical\",\n          children: [_jsx(NotificationRenderer, {}), _jsx(ToastButton, {})]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: TimeOutToastCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"ui-basic-box-stories-basic-box-stories.a232b034.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;;AAGA","sources":["webpack://@wpmudev/sui-react/./packages/ui/basic-box/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {BasicBox} from \"../../src\";\nimport {Button} from \"@wpmudev/sui-button\";\nimport {SettingBlock} from \"@wpmudev/sui-setting-block\";\nimport dedent from \"dedent\";\nexport const generalExampleCode = dedent`\n    export const Example = () => {\n      <BasicBox\n          title=\"Heading Text\"\n          description=\"Description text goes here\"\n          headerActions={\n            <>\n                <Button\n                  appearance=\"secondary\"\n                  color=\"black\"\n                  isSmall={true}\n                  icon=\"Upload\"\n                >\n                  Upload\n                </Button>\n              <Button appearance=\"primary\" color=\"blue\" isSmall={true}>\n                 Create new\n              </Button>\n            </>\n          }\n          footerActions={[\n            \"Example of footer content on left\",\n            <Button key={0} appearance=\"primary\" color=\"blue\" isSmall={true}>\n               Save changes\n            </Button>,\n          ]}\n        >\n            <SettingBlock\n                title=\"Import\"\n                description=\"Import your blocklist and allowlist from another website.\"\n            >\n                <p>\n                  Upload the blocklist and allowlist CSV file exported from another\n                  website. Imported user agents will be added to the existing blocklist\n                  and allowlist.\n                </p>\n                <div>\n                  <Button\n                       appearance=\"secondary\"\n                       icon=\"Upload\"\n                       color=\"black\"\n                       isSmall={true}\n                    >\n                      Upload file\n                  </Button>\n                </div>\n            </SettingBlock>\n            <SettingBlock\n                title=\"Export\"\n                description=\"Export your blocklist and allowlist for use on another website.\"\n            >\n                <Button\n                    appearance=\"secondary\"\n                    icon=\"Upload\"\n                    color=\"black\"\n                    isSmall={true}\n                  >\n                    Export\n                </Button>\n            </SettingBlock>\n      </BasicBox>\n    }\n`;\nexport const proExampleCode = dedent`\n<BasicBox isPro={true} />\n`;\nexport const SuiBasicBox = ({isPro = false}) => {\n  const _components = Object.assign({\n    p: \"p\",\n    div: \"div\"\n  }, _provideComponents());\n  return _jsxs(BasicBox, {\n    isPro: isPro,\n    title: \"Heading Text\",\n    description: \"Description text goes here\",\n    headerActions: _jsxs(_Fragment, {\n      children: [_jsx(Button, {\n        appearance: \"secondary\",\n        color: \"black\",\n        isSmall: true,\n        icon: \"Upload\",\n        children: \"Upload\"\n      }), _jsx(Button, {\n        appearance: \"primary\",\n        color: \"blue\",\n        isSmall: true,\n        children: \"Create new\"\n      })]\n    }),\n    footerActions: [\"Example of footer content on left\", _jsx(Button, {\n      appearance: \"primary\",\n      color: \"blue\",\n      isSmall: true,\n      children: \"Save changes\"\n    }, 0)],\n    children: [_jsxs(SettingBlock, {\n      title: \"Import\",\n      description: \"Import your blocklist and allowlist from another website.\",\n      children: [_jsx(_components.p, {\n        children: \"Upload the blocklist and allowlist CSV file exported from another website. Imported user agents will be added to the existing blocklist and allowlist.\"\n      }), _jsx(_components.div, {\n        children: _jsx(Button, {\n          appearance: \"secondary\",\n          icon: \"Upload\",\n          color: \"black\",\n          isSmall: true,\n          children: \"Upload file\"\n        })\n      })]\n    }), _jsx(SettingBlock, {\n      title: \"Export\",\n      description: \"Export your blocklist and allowlist for use on another website.\",\n      children: _jsx(Button, {\n        appearance: \"secondary\",\n        icon: \"Upload\",\n        color: \"black\",\n        isSmall: true,\n        children: \"Export\"\n      })\n    })]\n  });\n};\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"Below is a general example of the Basic Box component\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(SuiBasicBox, {})\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: generalExampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Pro variation\",\n      children: [_jsxs(\"p\", {\n        children: [\"Set the prop \", _jsx(Code, {\n          small: true,\n          children: \"isPro={true}\"\n        }), \" to change the variation\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(SuiBasicBox, {\n          isPro: true\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: proExampleCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
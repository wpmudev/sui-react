{"version":3,"file":"ui-checkbox-stories-checkbox-stories.0c6246b2.iframe.bundle.js","mappings":";;AAaA;;AAGA;;AAGA;;;;;;;;;;ACIA;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;ACtBA","sources":["webpack://wpmudev-sui/./packages/ui/checkbox/stories/tabs/Examples/States.mdx","webpack://wpmudev-sui/./packages/ui/checkbox/stories/tabs/Examples/Group.mdx","webpack://wpmudev-sui/./packages/ui/checkbox/stories/tabs/Examples/Nested.mdx","webpack://wpmudev-sui/./packages/ui/checkbox/stories/tabs/Examples/components/ValidationCheckbox.tsx","webpack://wpmudev-sui/./packages/ui/checkbox/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {BasicCheckbox} from \"./components/BasicCheckbox\";\nimport {FormField} from \"@wpmudev/sui-form-field\";\nimport dedent from \"dedent\";\nexport const disabledCode = dedent`\n    <Checkbox isDisabled={true} label=\"Disabled Checkbox\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nexport const smallCode = dedent`\n    <Checkbox isSmall={true} label=\"Small Checkbox\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nexport const indeterminateCode = dedent`\n    <Checkbox isIndeterminate={true} label=\"Indeterminate Checkbox\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      title: \"Disabled\",\n      contained: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\" To disable the checkbox use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isDisabled={true} \"\n        }), \" \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isDisabled: true,\n          label: \"Disabled Checkbox\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: disabledCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Small\",\n      contained: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\" To make the checkbox look smaller use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isSmall={true} \"\n        }), \" \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isSmall: true,\n          label: \"Small Checkbox\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: smallCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Indeterminate\",\n      contained: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: \" This is mainly used when the checkbox state depends on other checkboxes states where only some of them are checked. \"\n      }), _jsxs(\"p\", {\n        children: [\" Use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isIndeterminate={true} \"\n        }), \" to mark the checkbox as indeterminate \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isIndeterminate: true,\n          label: \"Indeterminate Checkbox\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: indeterminateCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Error\",\n      contained: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: \" This represents the error state for the checkbox. \"\n      }), _jsxs(\"p\", {\n        children: [\" Use the prop \", _jsx(Code, {\n          small: true,\n          children: \" isError={true} \"\n        }), \" if you want to display the checkbox in error state \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          isError: true,\n          label: \"Terms & conditions\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: indeterminateCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n// it will be passed to all checkbox items\n// it will be passed to all checkbox items\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {BasicCheckbox} from \"./components/BasicCheckbox\";\nimport {CheckboxGroup} from \"../../../src\";\nimport dedent from \"dedent\";\nexport const verticalCode = dedent`\n   <CheckboxGroup \n        onChange={(items) => console.log(items)} \n        commonCheckboxProps={{\n            // it will be passed to all checkbox items\n            name: \"groups-checkbox\"\t\t\t\t\t\t\n        }}>\n        <Checkbox label=\"Child in a Group\" />\n        <Checkbox label=\"Child in a Group\" />\n   </CheckboxGroup>\n`;\nexport const horizontalCode = dedent`\n    <CheckboxGroup \n        isInline={true} \n        onChange={(items) => console.log(items)}\n        commonCheckboxProps={{\n            // it will be passed to all checkbox items\n            name: \"groups-checkbox\"\t\t\t\t\t\t\n        }}>\n    >\n        <BasicCheckbox label=\"Child in a Group\"/>\n        <BasicCheckbox label=\"Child in a Group\"/>\n    </CheckboxGroup>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      title: \"Vertical\",\n      contained: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsx(\"p\", {\n        children: _jsxs(_components.p, {\n          children: [\"Verical is the default view for the group, you can track the changes for all checkboxes in the group using \", _jsx(Code, {\n            isSmall: true,\n            children: \"onChange\"\n          }), \" prop\"]\n        })\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(CheckboxGroup, {\n          onChange: items => console.log(items),\n          commonCheckboxProps: {\n            // it will be passed to all checkbox items\n            name: \"groups-checkbox\"\n          },\n          children: [_jsx(BasicCheckbox, {\n            label: \"Child in a Group\"\n          }), _jsx(BasicCheckbox, {\n            label: \"Child in a Group\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: verticalCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Horizontal\",\n      contained: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\" To dispaly the checkboxes horizontally use the prop \", _jsx(Code, {\n          isSmall: true,\n          children: \"isInline={true}\"\n        }), \" \"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(CheckboxGroup, {\n          isInline: true,\n          onChange: items => console.log(items),\n          commonCheckboxProps: {\n            // it will be passed to all checkbox items\n            name: \"groups-checkbox\"\n          },\n          children: [_jsx(BasicCheckbox, {\n            label: \"Child in a Group\"\n          }), _jsx(BasicCheckbox, {\n            label: \"Child in a Group\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: horizontalCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n// it will be passed to all checkbox items\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {BasicCheckbox} from \"./components/BasicCheckbox\";\nimport {Checkbox, CheckboxGroup, CheckBoxGroups} from \"../../../src\";\nimport dedent from \"dedent\";\nexport const checkboxGroups = dedent`\n   <CheckBoxGroups \n        onChange={(items) => {\n            console.log(\"nested debug\", items)\n        }}\n        commonCheckboxProps={{\n            // it will be passed to all checkbox items\n            name: \"groups-checkbox\"\t\t\t\t\t\t\n        }}\n    >\n        <CheckboxGroup \n            title=\"Parent\" \n            hasSubItems={true} \n        >\n            <Checkbox label=\"Child\" />\n            <Checkbox label=\"Child\" />\n        </CheckboxGroup>\n        <CheckboxGroup \n            title=\"Parent\" \n            hasSubItems={true} \n        >\n            <Checkbox label=\"Child\" />\n            <Checkbox label=\"Child\" />\n            <Checkbox label=\"Child\" />\n            <Checkbox label=\"Child\" />\n        </CheckboxGroup>\n    </CheckBoxGroups>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    style: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    children: [_jsx(\"p\", {\n      children: _jsxs(_components.p, {\n        children: [\"With \", _jsx(Code, {\n          isSmall: true,\n          children: \"CheckBoxGroups\"\n        }), \", you can establish a single-level hierarchy where parent and child states are interconnected, you can track changes on all nested checkboxes using the \", _jsx(Code, {\n          isSmall: true,\n          children: \"onChange\"\n        }), \" prop\"]\n      })\n    }), _jsx(Preview, {\n      wrapper: true,\n      children: _jsxs(CheckBoxGroups, {\n        onChange: items => {\n          console.log(\"nested debug\", items);\n        },\n        commonCheckboxProps: {\n          // it will be passed to all checkbox items\n          name: \"groups-checkbox\"\n        },\n        children: [_jsxs(CheckboxGroup, {\n          title: \"Parent\",\n          hasSubItems: true,\n          children: [_jsx(Checkbox, {\n            label: \"Child\"\n          }), _jsx(Checkbox, {\n            label: \"Child\"\n          })]\n        }), _jsxs(CheckboxGroup, {\n          title: \"Parent\",\n          hasSubItems: true,\n          children: [_jsx(Checkbox, {\n            label: \"Child\"\n          }), _jsx(Checkbox, {\n            label: \"Child\"\n          }), _jsx(Checkbox, {\n            label: \"Child\"\n          }), _jsx(Checkbox, {\n            label: \"Child\"\n          })]\n        })]\n      })\n    }), _jsx(Snippet, {\n      language: \"js\",\n      children: checkboxGroups\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Checkbox } from \"../../../../src\";\nimport React, { useState, Fragment } from \"react\";\nimport { useValidation } from \"@wpmudev/sui-hooks\";\nimport dedent from \"dedent\";\nexport const ValidationCheckboxCode = dedent `\nimport { Checkbox } from \"@wpmudev/sui-checkbox\"\nimport React, { useState, Fragment } from \"react\"\nimport { useValidation } from \"@wpmudev/sui-hooks\"\n\nconst ValidationCheckbox = () => {\n\tconst [isChecked, setIsChecked] = useState(false)\n\tconst [status, validationProps] = useValidation((value: boolean) => {\n\t\tif (value !== true) {\n\t\t\treturn \"This checkbox is required\"\n\t\t}\n\t})\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Checkbox\n\t\t\t\tlabel=\"Required Checkbox\"\n\t\t\t\tisChecked={isChecked}\n\t\t\t\tisError={status.isError}\n\t\t\t\tonChange={(e) => {\n\t\t\t\t\tconst inputElement = e.target as HTMLInputElement\n\t\t\t\t\tsetIsChecked(inputElement.checked)\n\t\t\t\t}}\n\t\t\t\t{...validationProps}\n\t\t\t/>\n\t\t\t{status.isError && (\n\t\t\t\t<div style={{ color: \"red\" }}>This field must be checked</div>\n\t\t\t)}\n\t\t</Fragment>\n\t)\n}\n`;\n// Basic Checkbox example\nexport const ValidationCheckbox = () => {\n    const [isChecked, setIsChecked] = useState(false);\n    const [status, validationProps] = useValidation((value) => {\n        if (value !== true) {\n            return \"This checkbox is required\";\n        }\n    });\n    return (_jsxs(Fragment, { children: [_jsx(Checkbox, { label: \"Required Checkbox\", isChecked: isChecked, isError: status.isError, onChange: (e) => {\n                    const inputElement = e.target;\n                    setIsChecked(inputElement.checked);\n                }, ...validationProps }), status.isError && (_jsx(\"div\", { style: { color: \"red\" }, children: \"This field must be checked\" }))] }));\n};\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet} from \"@wpmudev/sui-docs\";\nimport {BasicCheckbox} from \"./Examples/components/BasicCheckbox\";\nimport dedent from \"dedent\";\nimport States from \"./Examples/States.mdx\";\nimport Group from \"./Examples/Group.mdx\";\nimport Nested from \"./Examples/Nested.mdx\";\nimport Validation from \"./Examples/Validation.mdx\";\nexport const sampleCode = dedent`\n    <Checkbox label=\"Checkbox label\" onChange={(e)=> setChecked(e.target.checked)}/>\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"A basic Checkbox example used for most cases:\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(BasicCheckbox, {\n          label: \"Checkbox label\",\n          onChange: e => setChecked(e.target.checked)\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsx(Section, {\n      title: \"States & Groups\",\n      style: {\n        paddingTop: 0\n      },\n      children: _jsxs(Switcher, {\n        children: [_jsx(\"div\", {\n          label: \"States\",\n          value: \"states\",\n          children: _jsx(States, {})\n        }), _jsx(\"div\", {\n          label: \"Group\",\n          value: \"group\",\n          children: _jsx(Group, {})\n        }), _jsx(\"div\", {\n          label: \"Nested\",\n          value: \"nested\",\n          children: _jsx(Nested, {})\n        }), _jsx(\"div\", {\n          label: \"Validation\",\n          value: \"validation\",\n          children: _jsx(Validation, {})\n        })]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"ui-progress-bar-stories-ReactProgressBar-stories.d791f57c.iframe.bundle.js","mappings":";;AAYA;;AAGA;;AAGA;;AAGA;;;;;;;AAQA","sources":["webpack://wpmudev-sui/./packages/ui/progress-bar/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {ProgressBar} from \"../../src\";\nimport dedent from \"dedent\";\nexport const sampleCode = dedent`\n    <ProgressBar label=\"Loading Data...\" value=\"50\" allowCancel={true} />\n`;\nexport const largeBarCode = dedent`\n\t<ProgressBar label=\"Loading Data...\" size=\"lg\" value=\"25\" allowCancel={true} />\n`;\nexport const indeterminateCode = dedent`\n\t<ProgressBar label=\"Loading Data...\" isIndeterminate={true} allowCancel={true} />\n`;\nexport const CancelButtonCode = dedent`\n\t<ProgressBar label=\"Loading Data...\" value=\"67\" allowCancel={false} />\n`;\nexport const inlineCode = dedent`\n    <ProgressBar\n        label=\"Loading Data...\"\n        isInline={true}\n        value=\"23\"\n        allowCancel={false}\n    />\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"A Basic Progress Bar Example\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(ProgressBar, {\n          label: \"Loading Data...\",\n          value: \"50\",\n          allowCancel: true\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Large Bar\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(Preview, {\n        wrapper: true,\n        children: _jsx(ProgressBar, {\n          label: \"Loading Data...\",\n          size: \"lg\",\n          value: \"25\",\n          allowCancel: true\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: largeBarCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Indeterminate\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \" We use this variation when the process can't be calculated \"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(ProgressBar, {\n          label: \"Loading Data...\",\n          isIndeterminate: true,\n          allowCancel: true\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: indeterminateCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Without the cancel button\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(Preview, {\n        wrapper: true,\n        children: _jsx(ProgressBar, {\n          label: \"Loading Data...\",\n          value: \"67\",\n          allowCancel: false\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: CancelButtonCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Inline\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(Preview, {\n        wrapper: true,\n        children: _jsx(ProgressBar, {\n          label: \"Loading Data...\",\n          isInline: true,\n          value: \"23\",\n          allowCancel: false\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: inlineCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"assets-css-stories-Overview-stories-mdx.0f3ccbd1.iframe.bundle.js","mappings":";;;;;;;AA0CA","sources":["webpack://@wpmudev/sui-react/./packages/assets/css/stories/content/Overview/Usage.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport dedent from 'ts-dedent';\nimport {Section, Code, Snippet} from '@wpmudev/sui-docs';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(Section, {\n    contained: true,\n    style: {\n      paddingTop: 0\n    },\n    children: [_jsx(\"p\", {\n      children: _jsxs(_components.p, {\n        children: [\"Once you've installed the CSS Framework package into your plugin, you\\ncan import and minify the Sassy Cascading Stylesheets (\\n\", _jsx(Code, {\n          children: \".scss\"\n        }), \") using Webpack, Gulp, or any other preprocessor.\"]\n      })\n    }), _jsx(\"p\", {\n      children: _jsxs(_components.p, {\n        children: [\"The compressed file, obtained by the method mentioned before or directly\\nfrom the minified file existing in the CSS Framework package, should be\\ncalled using the enqueue method for WordPress, which will add a\", ' ', \"\\n\", _jsx(Code, {\n          children: \"<link>\"\n        }), \" tag into the \", _jsx(Code, {\n          children: \"<head>\"\n        }), \" section\\nof the plugin.\"]\n      })\n    }), _jsx(Snippet, {\n      language: \"php\",\n      children: dedent`\nfunction myplugin_styles() {\n    $plugin_url = plugin_dir_url( __FILE__ );\n    wp_enqueue_style( 'style',  $plugin_url . \"/css/shared-ui.css\");\n}\\n\nadd_action( 'admin_print_styles', myplugin_styles );\n\t`\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
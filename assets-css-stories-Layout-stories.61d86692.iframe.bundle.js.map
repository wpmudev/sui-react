{"version":3,"file":"assets-css-stories-Layout-stories.61d86692.iframe.bundle.js","mappings":";;;AAaA;;;;;AAMA;;;;AAKA","sources":["webpack://@wpmudev/sui-react/./packages/assets/css/stories/content/Layout/Main.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Page, Section, Code, Snippet, Table} from '@wpmudev/sui-docs';\nimport {Unstyled} from '@storybook/blocks';\nimport LinkTo from '@storybook/addon-links/react';\nimport dedent from 'dedent';\nexport const SnippetLayout = dedent`\n<div class=\"sui-layout\"> ... </div>\n`;\nexport const SnippetLayoutContent = dedent`\n<!-- For vertical spacing -->\n<div class=\"sui-layout sui-layout--vertical\"> ... </div>\\n\n<!-- For horizontal spacing -->\n<div class=\"sui-layout sui-layout--horizontal\"> ... </div>\n`;\nexport const SnippetSpacing = dedent`\n<div class=\"sui-layout\">\\n\n\t<div class=\"sui-layout__content\"> ... </div>\\n\n</div>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  if (!Page) _missingMdxReference(\"Page\", false);\n  if (!Page.Simple) _missingMdxReference(\"Page.Simple\", true);\n  return _jsx(Unstyled, {\n    children: _jsxs(Page.Simple, {\n      title: \"Layout\",\n      subtitle: _jsxs(_Fragment, {\n        children: [\"The layout is the most basic container required when using our default\", ' ', _jsx(LinkTo, {\n          kind: \"sui-css-framework-grid\",\n          story: \"grid\",\n          children: \"grid system\"\n        }), \". Choose between full-width (100% wide all the time) and contained (it has a maximum width) content.\"]\n      }),\n      status: \"ready\",\n      children: [_jsxs(Section, {\n        title: \"Usage\",\n        contained: true,\n        border: true,\n        style: {\n          paddingTop: 0\n        },\n        children: [_jsx(\"p\", {\n          children: _jsxs(_components.p, {\n            children: [\"It is essential to wrap the plugin's content with a div containing\\nthe \", _jsx(Code, {\n              children: \"sui-layout\"\n            }), \" class name. This class name will justify\\nthe content accordingly inside the admin area, removing unnecessary\\nspacing and allowing us to occupy the whole area more conveniently.\"]\n          })\n        }), _jsx(\"p\", {\n          children: \"Below, there's an example of placing the main layout wrapper.\"\n        }), _jsx(Snippet, {\n          language: \"html\",\n          children: SnippetLayout\n        }), _jsx(\"p\", {\n          children: _jsxs(_components.p, {\n            children: [\"While the \", _jsx(Code, {\n              children: \"sui-layout\"\n            }), \" class name allows the content to\\noccupy the entire width of the admin area (minus the sidebar), using\\nthe \", _jsx(Code, {\n              children: \"sui-layout__content\"\n            }), \" class name as an inner wrapper\\nwill horizontally align content to the center and give them a\\nmaximum width defined in the Design Tokens file.\"]\n          })\n        }), _jsx(Snippet, {\n          language: \"html\",\n          children: SnippetLayoutContent\n        }), _jsx(\"p\", {\n          children: _jsxs(_components.p, {\n            children: [\"Remember skipping the \", _jsx(Code, {\n              children: \"sui-layout--vertical\"\n            }), \" class for\\nthe Top Navigation component is fine, but it is a must-go modifier\\nfor other types of content.\"]\n          })\n        })]\n      }), _jsxs(Section, {\n        title: \"Spacing\",\n        children: [_jsxs(\"div\", {\n          className: \"csb-section__contained\",\n          style: {\n            marginBottom: 20\n          },\n          children: [_jsx(\"p\", {\n            children: _jsxs(_components.p, {\n              children: [\"Modify the \", _jsx(Code, {\n                children: \"sui-layout\"\n              }), \" wrapper spacing in two ways:\\nvertical and horizontal, where vertical spacing will prevent\\nyour content from being glued to the WordPress top bar.\"]\n            })\n          }), _jsx(Snippet, {\n            html: \"html\",\n            children: SnippetSpacing\n          }), _jsx(\"p\", {\n            children: _jsx(_components.p, {\n              children: \"The spacing respects a base gutter of 8px and relies on the\\nthree main breakpoints we use in our design system: default (or\\nnone), medium, and large.\"\n            })\n          }), _jsx(\"p\", {\n            children: _jsx(_components.p, {\n              children: \"When applying any modifier spacing class, these set padding to\\n16px, and it applies to every screen size; Once the screen\\nreaches a minimum width of 1024px, the spacing overwrites to\\n24px; Finally, for screens larger than 1200px, the spacing would\\nbe 32px.\"\n            })\n          }), _jsx(\"p\", {\n            children: \"Peek at the table below for more detailed information.\"\n          })]\n        }), _jsx(Table, {\n          headers: ['Breakpoint', 'Container Min-Width', 'Spacing'],\n          content: [{\n            columns: {\n              0: _jsx(_components.strong, {\n                children: \"Default\"\n              }),\n              1: 'None (auto)',\n              2: '48px'\n            }\n          }, {\n            columns: {\n              0: _jsx(_components.strong, {\n                children: \"Medium\"\n              }),\n              1: '≥ 1024px',\n              2: '24px'\n            }\n          }, {\n            columns: {\n              0: _jsx(_components.strong, {\n                children: \"Large\"\n              }),\n              1: '≥ 1200px',\n              2: '32px'\n            }\n          }]\n        })]\n      })]\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":[],"sourceRoot":""}
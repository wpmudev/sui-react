{"version":3,"file":"ui-radio-stories-ReactRadio-stories.e39cc021.iframe.bundle.js","mappings":";;;;;AAeA;;;;;AAMA;;;;AAKA;;;;;;;;;;;;;;;ACDA;;;;;;;;;;;;;;;AAgBA;;;;;ACvBA","sources":["webpack://@wpmudev/sui-react/./packages/ui/radio/stories/tabs/Examples/States.mdx","webpack://@wpmudev/sui-react/./packages/ui/radio/stories/tabs/Examples/Types.mdx","webpack://@wpmudev/sui-react/./packages/ui/radio/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {RadioGroup, Radio} from \"../../../src\";\nimport dedent from \"dedent\";\nexport const SmallCode = dedent`\n    <RadioGroup isSmall={true}>\n        <Radio label=\"Radio Label\" value=\"radio-1\" />\n        <Radio label=\"Radio Label\" value=\"radio-2\" />\n    </RadioGroup>\n`;\nexport const DisabledCode = dedent`\n    <RadioGroup isDisabled={true}>\n        <Radio label=\"Radio Label\" value=\"radio-1\" />\n        <Radio label=\"Radio Label\" value=\"radio-2\" />\n    </RadioGroup>\n`;\nexport const tagCode = dedent`\n    <RadioGroup>\n       <Radio tag=\"tag\" label=\"Radio Label\" value=\"radio-1\" />\n    </RadioGroup>\n`;\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      title: \"Small\",\n      contained: true,\n      border: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"Use the prop \", _jsx(Code, {\n          small: true,\n          children: \"isSmall={true}\"\n        }), \" to make the Radio smaller\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(RadioGroup, {\n          isSmall: true,\n          children: [_jsx(Radio, {\n            label: \"Radio Label\",\n            value: \"radio-1\"\n          }), _jsx(Radio, {\n            label: \"Radio Label\",\n            value: \"radio-2\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: SmallCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Disabled\",\n      contained: true,\n      border: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"Use the prop \", _jsx(Code, {\n          small: true,\n          children: \"isDisabled={true}\"\n        }), \" to make the Radio non-interactive.\"]\n      }), _jsx(\"p\", {\n        children: \"You can use the prop indvidually with each Radio instance or for the whole group.\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(RadioGroup, {\n          isDisabled: true,\n          children: [_jsx(Radio, {\n            label: \"Radio Label\",\n            value: \"radio-1\"\n          }), _jsx(Radio, {\n            label: \"Radio Label\",\n            value: \"radio-2\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: DisabledCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"With a Tag\",\n      contained: true,\n      border: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(_components.p, {\n        children: [\"Use the \", _jsx(Code, {\n          small: true,\n          children: \"tag\"\n        }), \" prop to add add a tag on the right side\\nof the label\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsx(RadioGroup, {\n          children: _jsx(Radio, {\n            tag: \"tag\",\n            label: \"Radio Label\",\n            value: \"radio-1\"\n          })\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: tagCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {RadioGroup, Radio} from \"../../../src\";\nimport dedent from \"dedent\";\nexport const compoundCode = dedent`\n    <RadioGroup asBlock={true}>\n        <Radio\n          tag=\"Recommended\"\n          label=\"Radio Label\"\n          value=\"radio-1\"\n          description=\"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\"\n        />\n        <Radio\n          tag=\"Recommended\"\n          label=\"Radio Label\"\n          value=\"radio-2\"\n          description=\"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\"\n        />\n    </RadioGroup>\n`;\nexport const stackedCode = dedent`\n    <RadioGroup isInline={false} asBlock={true}>\n        <Radio\n          tag=\"Recommended\"\n          description=\"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\"\n          label=\"Radio Label\"\n          value=\"radio-1\"\n        />\n        <Radio\n          tag=\"Recommended\"\n          description=\"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\"\n          label=\"Radio Label\"\n          value=\"radio-2\"\n        />\n    </RadioGroup>\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      title: \"Compound Radios\",\n      border: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"Use the prop \", _jsx(Code, {\n          small: true,\n          children: \"asBlock={true}\"\n        }), \" to display the RadioGroup as a standalone box\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(RadioGroup, {\n          asBlock: true,\n          children: [_jsx(Radio, {\n            tag: \"Recommended\",\n            label: \"Radio Label\",\n            value: \"radio-1\",\n            description: \"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\"\n          }), _jsx(Radio, {\n            tag: \"Recommended\",\n            label: \"Radio Label\",\n            value: \"radio-2\",\n            description: \"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: compoundCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Stacked\",\n      border: true,\n      style: {\n        paddingRight: 0,\n        paddingLeft: 0\n      },\n      children: [_jsxs(\"p\", {\n        children: [\"Set the prop \", _jsx(Code, {\n          small: true,\n          children: \"isInline={false}\"\n        }), \" to stack the radios one upon the other\"]\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(RadioGroup, {\n          isInline: false,\n          asBlock: true,\n          children: [_jsx(Radio, {\n            tag: \"Recommended\",\n            description: \"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\",\n            label: \"Radio Label\",\n            value: \"radio-1\"\n          }), _jsx(Radio, {\n            tag: \"Recommended\",\n            description: \"Lossy compression offers the best compression rate for all type of images and This is recommended for most sites.\",\n            label: \"Radio Label\",\n            value: \"radio-2\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: stackedCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n/*Import Variations*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Section, Switcher, Preview, Snippet, Code} from \"@wpmudev/sui-docs\";\nimport {RadioGroup, Radio} from \"../../src\";\nimport dedent from \"dedent\";\nimport States from \"./Examples/States.mdx\";\nimport Types from \"./Examples/Types.mdx\";\nexport const sampleCode = dedent`\n  <RadioGroup>\n    <Radio label=\"Radio Label\" value=\"radio-1\" />\n    <Radio label=\"Radio Label\" value=\"radio-2\" />\n  </RadioGroup>\n`;\nfunction _createMdxContent(props) {\n  return _jsxs(_Fragment, {\n    children: [\"\\n\", \"\\n\", \"\\n\", _jsxs(Section, {\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"Below is the default form of the Radio Component\"\n      }), _jsx(Preview, {\n        wrapper: true,\n        children: _jsxs(RadioGroup, {\n          children: [_jsx(Radio, {\n            label: \"Radio Label\",\n            value: \"radio-1\"\n          }), _jsx(Radio, {\n            label: \"Radio Label\",\n            value: \"radio-2\"\n          })]\n        })\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: sampleCode\n      })]\n    }), \"\\n\", _jsx(Section, {\n      title: \"States & Types\",\n      style: {\n        paddingTop: 0\n      },\n      children: _jsxs(Switcher, {\n        children: [_jsx(\"div\", {\n          label: \"States\",\n          value: \"states\",\n          children: _jsx(States, {})\n        }), _jsx(\"div\", {\n          label: \"Types\",\n          value: \"types\",\n          children: _jsx(Types, {})\n        })]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"ui-modal-stories-modal-stories.b8939133.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA","sources":["webpack://@wpmudev/sui-react/./packages/ui/modal/stories/tabs/TabExamples.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/Users/govind/Development/SUI Development/sui-react/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {useRef} from \"react\";\nimport {Section, Snippet} from \"@wpmudev/sui-docs\";\nimport {Modal, ModalHeader, ModalFooter, ModalBody} from \"../../src\";\nimport dedent from \"dedent\";\nimport {Button} from \"@wpmudev/sui-button\";\nimport {Input} from \"@wpmudev/sui-input\";\nimport {FormField} from \"@wpmudev/sui-form-field\";\nexport const simpleCode = dedent`\n\n    export const SimpleModal = () => {\n\n    const ref = useRef();\n\n    return (\n        <>\n            <Modal id=\"simple-modal\" ref={ref}>\n\n                <ModalHeader title=\"Apply Config\">\n                    Choose the audience you want to send form data to.\n                </ModalHeader>\n\n                <ModalBody>\n                    Are you sure you want to apply the Default config to this site? We\n                    recommend you have a backup available as your existing settings\n                    configuration will be overridden.\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button\n                        appearance=\"secondary\"\n                        color=\"blue\"\n                        isSmall={true}\n                        onClick={() => ref.current.closeModal()}\n                    >\n                       Cancel\n                    </Button>\n\n                    <Button\n                        appearance=\"primary\"\n                        color=\"blue\"\n                        isSmall={true}\n                        onClick={() => {\n                            console.log(\"Submitted\")\n                        }}\n                    >\n                        Apply\n                    </Button>\n                </ModalFooter>\n            </Modal>\n\n            <Button\n               appearance=\"primary\"\n               color=\"blue\"\n               onClick={() => {\n    \t          ref.current.openModal()\n               }}\n            >\n                Apply Config\n            </Button>\n        </>\n    )\n\n}\n\n`;\nexport const SimpleModal = () => {\n  const ref = useRef();\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Modal, {\n      id: \"simple-modal\",\n      ref: ref,\n      children: [_jsx(ModalHeader, {\n        title: \"Apply Config\",\n        children: \"Choose the audience you want to send form data to.\"\n      }), _jsx(ModalBody, {\n        children: \"Are you sure you want to apply the Default config to this site? We recommend you have a backup available as your existing settings configuration will be overridden.\"\n      }), _jsxs(ModalFooter, {\n        children: [_jsx(Button, {\n          appearance: \"secondary\",\n          color: \"blue\",\n          isSmall: true,\n          onClick: () => ref.current.closeModal(),\n          children: \"Cancel\"\n        }), _jsx(Button, {\n          appearance: \"primary\",\n          color: \"blue\",\n          isSmall: true,\n          onClick: () => {\n            console.log(\"Submitted\");\n          },\n          children: \"Apply\"\n        })]\n      })]\n    }), _jsx(Button, {\n      appearance: \"primary\",\n      color: \"blue\",\n      onClick: () => {\n        ref.current.openModal();\n      },\n      children: \"Apply Config\"\n    })]\n  });\n};\nexport const advancedCode = dedent`\n    export const AdvancedModal = () => {\n\n    const ref = useRef();\n\n    return (\n        <>\n            <Modal id=\"advanced-modal\" ref={ref}>\n\n                <ModalHeader title=\"Submit Button\" />\n\n                <ModalBody>\n                    <FormField label=\"Button Text\">\n                        <Input id=\"button-text\" placeholder=\"Enter Text\" />\n                    </FormField>\n                    <FormField label=\"Button Processing Text\" helper=\"This text will appear as button text while the quiz is being submitted.\">\n                        <Input id=\"button-processing-text\" placeholder=\"Sending...\" />\n                    </FormField>\n                    <hr />\n                    <FormField label=\"Custom CSS Class\" helper='These will be output as you see them here. To add multiple classes, separate them with a space. For example, \"form-submit-btn button\" will add two classes \"form-submit-btn\" and \"button\".'>\n                        <Input id=\"custom-css-class\" placeholder=\"Eg., form-submit-btn\" />\n                    </FormField>\n                </ModalBody>\n\n                <ModalFooter>\n                    <Button\n                        appearance=\"tertiary\"\n                        color=\"black\"\n                        isSmall={true}\n                        onClick={() => ref.current.closeModal()}\n                    >\n                        Tertiary\n                    </Button>\n                    <Button\n                        appearance=\"secondary\"\n                        color=\"black\"\n                        isSmall={true}\n                        onClick={() => ref.current.closeModal()}\n                    >\n                        Secondary\n                    </Button>\n\n                    <Button\n                        appearance=\"primary\"\n                        color=\"blue\"\n                        isSmall={true}\n                        onClick={() => {\n                            console.log(\"Submitted\")\n                        }}\n                    >\n                        Primary\n                    </Button>\n                </ModalFooter>\n            </Modal>\n\n                <Button\n                    appearance=\"primary\"\n                    color=\"blue\"\n                    onClick={() => {\n                        ref.current.openModal()\n                    }}\n                >\n                    Open form\n                </Button>\n        </>\n    )\n\n} `;\nexport const AdvancedModal = () => {\n  const _components = Object.assign({\n    hr: \"hr\"\n  }, _provideComponents());\n  const ref = useRef();\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Modal, {\n      id: \"advanced-modal\",\n      ref: ref,\n      children: [_jsx(ModalHeader, {\n        title: \"Submit Button\"\n      }), _jsxs(ModalBody, {\n        children: [_jsx(FormField, {\n          label: \"Button Text\",\n          children: _jsx(Input, {\n            id: \"button-text\",\n            placeholder: \"Enter Text\"\n          })\n        }), _jsx(FormField, {\n          label: \"Button Processing Text\",\n          helper: \"This text will appear as button text while the quiz is being submitted.\",\n          children: _jsx(Input, {\n            id: \"button-processing-text\",\n            placeholder: \"Sending...\"\n          })\n        }), _jsx(_components.hr, {}), _jsx(FormField, {\n          label: \"Custom CSS Class\",\n          helper: \"These will be output as you see them here. To add multiple classes, separate them with a space. For example, \\\"form-submit-btn button\\\" will add two classes \\\"form-submit-btn\\\" and \\\"button\\\".\",\n          children: _jsx(Input, {\n            id: \"custom-css-class\",\n            placeholder: \"Eg., form-submit-btn\"\n          })\n        })]\n      }), _jsxs(ModalFooter, {\n        children: [_jsx(Button, {\n          appearance: \"tertiary\",\n          color: \"black\",\n          isSmall: true,\n          onClick: () => ref.current.closeModal(),\n          children: \"Tertiary\"\n        }), _jsx(Button, {\n          appearance: \"secondary\",\n          color: \"black\",\n          isSmall: true,\n          onClick: () => ref.current.closeModal(),\n          children: \"Secondary\"\n        }), _jsx(Button, {\n          appearance: \"primary\",\n          color: \"blue\",\n          isSmall: true,\n          onClick: () => {\n            console.log(\"Submitted\");\n          },\n          children: \"Primary\"\n        })]\n      })]\n    }), _jsx(Button, {\n      appearance: \"primary\",\n      color: \"blue\",\n      onClick: () => {\n        ref.current.openModal();\n      },\n      children: \"Open form\"\n    })]\n  });\n};\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Section, {\n      title: \"Simple Dialog\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: \"Simple dialogs are commonly used to display confirmation messages.\"\n      }), _jsx(\"div\", {\n        className: \"sui-wrap sui-theme--light\",\n        style: {\n          marginBottom: 30\n        },\n        children: _jsx(SimpleModal, {})\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: simpleCode\n      })]\n    }), \"\\n\", _jsxs(Section, {\n      title: \"Advanced Dialog\",\n      contained: true,\n      style: {\n        paddingTop: 30\n      },\n      children: [_jsx(\"p\", {\n        children: _jsx(_components.p, {\n          children: \"Advanced dialogs are utilised when the body contains extensive content such\\nas forms and other lengthy information.\"\n        })\n      }), _jsx(\"div\", {\n        className: \"sui-wrap sui-theme--light\",\n        style: {\n          marginBottom: 30\n        },\n        children: _jsx(AdvancedModal, {})\n      }), _jsx(Snippet, {\n        language: \"js\",\n        children: advancedCode\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}